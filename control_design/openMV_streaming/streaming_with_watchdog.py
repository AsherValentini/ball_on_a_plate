import omv
import rpc
import sensor
import pyb # Import module for delays and timing (watchdog timer import)


sensor.reset()
sensor.set_pixformat(sensor.RGB565)
sensor.set_framesize(sensor.QVGA)
sensor.skip_frames(time=2000)

# Turn off the frame buffer connection to the IDE from the OpenMV Cam side.
#
# This needs to be done when manually compressing jpeg images at higher quality
# so that the OpenMV Cam does not try to stream them to the IDE using a fall back
# mechanism if the JPEG image is too large to fit in the IDE JPEG frame buffer on the OpenMV Cam.

omv.disable_fb(True)

# The RPC library above is installed on your OpenMV Cam and provides multiple classes for
# allowing your OpenMV Cam to be controlled over USB or LAN/WLAN.

################################################################
# Choose the interface you wish to control your OpenMV Cam over.
################################################################

interface = rpc.rpc_usb_vcp_slave()

################################################################
# Watch dog timer setup
################################################################

watchdog_timeout = 10 * 1000 # 10 seconds in milliseconds
last_command_time = pyb.millis()

def reset_watchdog():
    global last_command_time
    last_command_time = pyb.millis()

def watchdog_check():
    if pyb.elapsed_millis(last_command_time) > watchdog_timeout:
        print("Watchdog timer expired, resetting...")
        pyb.hard_reset() # Resets the camera

################################################################
# Call Backs
################################################################


# This is called repeatedly by interface.stream_writer().
def stream_generator_cb():
    return sensor.snapshot().compress(quality=80).bytearray()


# Transmits a stream of bytes()'s generated by stream_generator_cb to the master device.
def jpeg_image_stream_cb():
    interface.stream_writer(stream_generator_cb)


# When called sets the pixformat and framesize, and then schedules
# frame streaming to start after the RPC call finishes.
#
# data is a pixformat string and framesize string.
def jpeg_image_stream(data):
    pixformat, framesize = bytes(data).decode().split(",")
    sensor.set_pixformat(eval(pixformat))
    sensor.set_framesize(eval(framesize))
    interface.schedule_callback(jpeg_image_stream_cb)
    return bytes()

# Register call backs.

interface.register_callback(jpeg_image_stream)

# Once all call backs have been registered we can start
# processing remote events. interface.loop() does not return.
interface.loop() # Process incoming RPC calls

